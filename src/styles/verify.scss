@use "sass:map";
@use "sass:meta";
@use "sass:list";
@use "./vars.scss" as vars;

$common_values: unset inherit initial revert revert-layer;
$directions: left right top bottom;
$animation-directions: normal reverse alternate alternate-reverse;
$animation-modes: node forwards backwards both;
$animation-states: running paused;
$positions: static relative absolute fixed sticky;
$container-types: inline-size size;

@function is_common_value($value) {
  @each $v in $common_values {
    @if $value == $v {
      @return true;
    }
  }
  @return false;
}

@function valid_number($number, $canNull: false) {
  @if meta.type-of($number) !=
    "number" and
    (not $canNull or $number != null) and not
    is_common_value($number)
  {
    @debug "--- valid_number ---";
    @error "Invalid number: #{$number}";
    @return null;
  }
  @return $number;
}

@function valid_numbers($numbers, $canNull: false) {
  @each $num in $numbers {
    $_num: valid_number($num, $canNull);
    @if $_num == null {
      @return null;
    }
  }
  @return $numbers;
}

@function valid_string($string, $canNull) {
  @if meta.type-of($string) !=
    "string" and
    (not $canNull or $string != null) and not
    is_common_value($number)
  {
    @debug "--- valid_string ---";
    @error "Invalid string: #{$string}";
    @return null;
  }
  @return $string;
}

@function valid_strings($strings, $canNull: false) {
  @each $str in $strings {
    $_str: valid_string($str, $canNull);
    @if $_str == null {
      @return null;
    }
  }
  @return $strings;
}

@function valid_direction($direction) {
  @each $d in $directions {
    @if $direction == $d {
      @return $direction;
    }
  }
  @debug "--- valid_direction ---";
  @warn "Invalid direction: #{$direction}, direction should in #{$directions}";
  @return null;
}

@function valid_animation_direction($direction) {
  @if $direction == null {
    @return $direction;
  }
  @each $d in $animation-directions {
    @if $direction == $d {
      @return $direction;
    }
  }
  @debug "--- valid_animation_direction ---";
  @warn "Invalid direction: #{$direction}, direction should in #{$animation-directions}";
  @return null;
}

@function valid_animation_mode($mode) {
  @if $mode == null {
    @return $mode;
  }
  @each $m in $animation-modes {
    @if $mode == $m {
      @return $mode;
    }
  }
  @debug "--- valid_animation_mode ---";
  @warn "Invalid mode: #{$mode}, mode should in #{$animation-modes}";
  @return null;
}

@function valid_animation_state($state) {
  @if $state == null {
    @return $state;
  }
  @each $s in $animation-states {
    @if $state == $s {
      @return $state;
    }
  }
  @debug "--- valid_animation_state ---";
  @warn "Invalid state: #{$state}, state should in #{$animation-states}";
  @return null;
}

@function valid_position($position) {
  @each $p in $positions {
    @if $position == $p {
      @return $position;
    }
  }
  @debug "--- valid_position ---";
  @warn "Invalid position: #{$position}, position should in #{$positions}";
  @return null;
}

@function valid_container_type($type) {
  @each $c in $container-types {
    @if $type == $c {
      @return $type;
    }
  }
  @debug "--- valid_container_type ---";
  @warn "Invalid type: #{$type}, type should in #{$container-types}";
  @return null;
}
