@use "sass:math";
@use "sass:meta";
@use "sass:list";
@use "./vars.scss" as vars;

@function rem($number, $base: null) {
  $_base: if($base, $base, vars.$rem-base);
  @if math.is-unitless($number) {
    @return #{math.div($number, $_base)}rem;
  } @else {
    @return #{$number / vars.$rem-unit-base}rem;
  }
}

@function unitless-to-rem($value) {
  @if meta.type-of($value) != "number" {
    @return $value;
  }
  @if math.is-unitless($value) {
    @return rem($value);
  } @else {
    @return $value;
  }
}

@function values($values) {
  @if meta.type-of($values) == "list" {
    $_values: ();
    @each $v in $values {
      $_values: list.append($_values, unitless-to-rem($v));
    }
    @return $_values;
  } @else if meta.type-of($values) == "number" {
    @return unitless-to-rem($values);
  }
  @return $values;
}

@function toLighten($color, $lighten) {
  @return scale-color(
    $color,
    $red: $lighten,
    $green: $lighten,
    $blue: $lighten
  );
}

@function toDarken($color, $lighten) {
  @return scale-color(
    $color,
    $red: -$lighten,
    $green: -$lighten,
    $blue: -$lighten
  );
}

@function min-width($size) {
  @return "(min-width: #{$size})";
}

@function max-width($size) {
  @return "(max-width: #{$size - 1})";
}

@function only-width($min, $max) {
  @if ($min == null) {
    @return max-width($max);
  } @else if ($max == null) {
    @return min-width($max);
  } @else {
    @return "(min-width: #{$min}) and (max-width: #{$max - 1})";
  }
}
